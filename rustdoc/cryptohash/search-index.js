var searchIndex = {};
searchIndex["base32"] = {"doc":"","items":[[4,"Alphabet","base32","",null,null],[13,"RFC4648","","",0,null],[12,"padding","base32::Alphabet","",0,null],[13,"Crockford","base32","",0,null],[5,"encode","","",null,null],[5,"decode","","",null,{"inputs":[{"name":"alphabet"},{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"alphabet"}}]],"paths":[[4,"Alphabet"]]};
searchIndex["blake2_rfc"] = {"doc":"A pure Rust implementation of BLAKE2 based on RFC 7693.","items":[[5,"selftest","blake2_rfc","Runs the self-test for both BLAKE2b and BLAKE2s.",null,{"inputs":[],"output":null}],[0,"blake2b","","The BLAKE2b hash function.",null,null],[3,"Blake2bResult","blake2_rfc::blake2b","Container for a hash result.",null,null],[3,"Blake2b","","State context.",null,null],[5,"blake2b","","Convenience function for all-in-one computation.",null,null],[5,"selftest","","Runs the self-test for this hash function.",null,{"inputs":[],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"blake2bresult"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_bytes","","Returns the contained hash result as a byte string.",0,null],[11,"len","","Returns the length of the hash result.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"blake2b"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new hashing context without a key.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_key","","Creates a new hashing context with a key.",1,null],[11,"update","","Updates the hashing context with more data.",1,null],[11,"finalize","","Consumes the hashing context and returns the resulting hash.",1,{"inputs":[{"name":"self"}],"output":{"name":"blake2bresult"}}],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"blake2s","blake2_rfc","The BLAKE2s hash function.",null,null],[3,"Blake2sResult","blake2_rfc::blake2s","Container for a hash result.",null,null],[3,"Blake2s","","State context.",null,null],[5,"blake2s","","Convenience function for all-in-one computation.",null,null],[5,"selftest","","Runs the self-test for this hash function.",null,{"inputs":[],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"blake2sresult"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_bytes","","Returns the contained hash result as a byte string.",2,null],[11,"len","","Returns the length of the hash result.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"blake2s"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new hashing context without a key.",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_key","","Creates a new hashing context with a key.",3,null],[11,"update","","Updates the hashing context with more data.",3,null],[11,"finalize","","Consumes the hashing context and returns the resulting hash.",3,{"inputs":[{"name":"self"}],"output":{"name":"blake2sresult"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[3,"Blake2bResult"],[3,"Blake2b"],[3,"Blake2sResult"],[3,"Blake2s"]]};
searchIndex["constant_time_eq"] = {"doc":"","items":[[5,"constant_time_eq","constant_time_eq","Compares two equal-sized byte strings in constant time.",null,null]],"paths":[]};
searchIndex["cryptohash"] = {"doc":"Trait abstracting over cryptographic hash-functions.","items":[[3,"Blake2b","cryptohash","Wraps Blake2b in the `CryptoHash` trait",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"blake2b"}}],[11,"state","","",0,null],[8,"State","","The trait for a hash state",null,null],[10,"fin","","",1,{"inputs":[{"name":"self"}],"output":{"name":"digest"}}],[8,"CryptoHash","","A wrapper trait for cryptographic hash functions",null,null],[16,"Digest","","The output type of the hash function",2,null],[16,"State","","The hash-state currently being computed",2,null],[10,"state","","Constructor for a new hash-state",2,null]],"paths":[[3,"Blake2b"],[8,"State"],[8,"CryptoHash"]]};
initSearch(searchIndex);
