var searchIndex = {};
searchIndex["aodag"] = {"doc":"Append-only DAG, with privileged and mutable access to the head, and O(n) and read-only access to the tail.","items":[[3,"Versioned","aodag","A value that can be updated, keeping old versions available but read-only",null,null],[6,"Address","","An address pointing at a value in the DAG",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Construct a new `Versioned<T>` from a `T`",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"address","","The `Address` of the currently active value",0,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"update","","Push a new `T` to the DAG, leaving the old one reachable through an `Arc`-indirection",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"update_merging","","Pushes `T` to the head of both `Versioned<T>`, Making both `Versioned<T>` logically the same.",0,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":null}],[11,"get","","Get a reference to `T` at the provided `Address`",0,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"option"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"Versioned"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
initSearch(searchIndex);
